version: "3"
services:

  api: # fastapi service for rapidly create robuse apis
    container_name: api_container
    build:
      context: ./services/_api
      dockerfile: api.fa.dockerfile
      network: host
      args:
        - ENVIRONMENT=${ENVIRONMENT-dev}
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/tmp/keys/application_default_credentials.json
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT:-your_gcp_project_prod}
      # - POSTGRES_DB=${POSTGRES_DB:-db}
    ports:
      - 8000:8000
    volumes:
      - ./services/_api/src:/app
      - ~/.config/gcloud/application_default_credentials.json:/tmp/keys/application_default_credentials.json
    command: uvicorn app.main:app --reload --workers 1 --host 0.0.0.0 --port ${PORT-8000} --log-level info
    # command: sh -c "while true; do sleep 1; done"


  web: # Angular service framework
    container_name: web_container
    build:
      context: ./services/_web
      dockerfile: web.ngfb.dockerfile
      network: host
    ports:
      - 4201:4200
    volumes:
      - ./services/_web/app:/home/node/app
    command: "yarn start --host 0.0.0.0"
    # command: sh -c "while true; do sleep 1; done"


  web_srv: # Angular service that is designed to be a microservice to embed via iframe into other frameworks
    container_name: web_srv_container
    build:
      context: ./services/_web_srv
      dockerfile: web.srv.dockerfile
      network: host
    ports:
      - 4202:4200
    volumes:
      - ./services/_web_srv/app:/home/node/app
    command: "yarn start --host 0.0.0.0"
    # command: sh -c "while true; do sleep 1; done"

  
  admin_web: # Angular service for administration and settings management
    container_name: admin_web_container
    build:
      context: ./services/admin_web
      dockerfile: admin.web.dockerfile
      network: host
    ports:
      - 4203:4200
    volumes:
      - ./services/admin_web/app:/home/node/app
    command: "yarn start --host 0.0.0.0"
    

  dash: # a plotly dash service that runs ontop of flask, for doing charts with just python
    # 8888 ports for kernel in jupytor notebooks
    ports:
      - 8888:8888
